{"version":3,"sources":["TaskItem.js","App.js","serviceWorker.js","index.js"],"names":["TaskItem","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","expanded","notesValue","task","notes","nameValue","name","datePickerOpen","dateValue","moment","due_date","handleChange","bind","assertThisInitialized","handleDateToggle","handleExpandClick","handleBlur","handleNotesUpdate","handleNameUpdate","handleFavoriteClick","handleDateAccept","setState","_this2","axios","put","id","completed","then","res","onUpdate","data","e","_this3","close","_this4","format","date","target","value","_this5","starred","icon","_this6","classes","react_default","a","createElement","Favorite_default","FavoriteBorder_default","Card","className","card","CardContent","cardContent","Checkbox","checkBox","checked","onChange","TextField","fullWidth","placeholder","textField","onBlur","InputProps","disableUnderline","Typography","dateTime","fromNow","CardActions","disableSpacing","IconButton","onClick","Event_default","material_ui_pickers_esm","utils","MomentUtils","variant","open","onClose","clsx","expand","defineProperty","expandOpen","aria-expanded","aria-label","ExpandMore_default","Collapse","in","timeout","unmountOnExit","collapseContent","autoFocus","rows","multiline","margin","Component","withStyles","theme","maxWidth","borderRadius","display","alignItems","justifyContent","fontFamily","paddingBottom","taskName","fontSize","transform","marginLeft","transition","transitions","create","duration","shortest","paddingTop","marginRight","width","textAlign","App","tasks","drawerOpen","get","handleUpdate","handleAddTask","toggleDrawer","updatedTasks","i","length","post","push","isOpen","taskElements","src_TaskItem","key","root","CssBaseline","AppBar","position","appBar","appBarShift","Toolbar","color","edge","menuButton","hide","Menu_default","noWrap","Drawer","drawer","anchor","onOpen","paper","drawerPaper","drawerHeader","ChevronLeft_default","Divider","List","map","text","index","ListItem","button","ListItemIcon","MoveToInbox_default","ListItemText","primary","Fab","fab","Add_default","content","contentShift","right","bottom","easing","sharp","leavingScreen","concat","easeOut","enteringScreen","spacing","flexShrink","objectSpread","padding","mixins","toolbar","flexGrow","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.b02f54c0.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport Card from '@material-ui/core/Card';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport Typography from '@material-ui/core/Typography';\nimport axios from 'axios';\nimport clsx from 'clsx';\nimport Collapse from '@material-ui/core/Collapse';\nimport IconButton from '@material-ui/core/IconButton';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport TextField from '@material-ui/core/TextField';\nimport EventIcon from '@material-ui/icons/Event';\nimport FavoriteIcon from '@material-ui/icons/Favorite';\nimport FavoriteBorderIcon from '@material-ui/icons/FavoriteBorder';\nimport { DateTimePicker, MuiPickersUtilsProvider } from \"@material-ui/pickers\";\nimport MomentUtils from '@date-io/moment';\nimport moment from 'moment';\n\n\nconst useStyles = theme => ({\n  card: {\n    maxWidth: 580,\n    margin: \"24px auto\",\n    borderRadius: 3\n  },\n  cardContent: {  \n      display: \"flex\",\n      alignItems: \"center\",\n      justifyContent: \"flex-start\",\n      fontFamily: \"Helvetica Neue, sans-serif\",\n      paddingBottom: 0\n  },\n  taskName : {\n    fontSize: 15\n  },\n  expand: {\n    transform: 'rotate(0)', //rotate 0 deg \n    marginLeft: 'auto',\n    transition: theme.transitions.create('transform', {\n      duration: theme.transitions.duration.shortest\n    })\n  },\n  expandOpen: {\n    transform: 'rotate(180deg)'\n  },\n  collapseContent: {\n    paddingTop: 0\n  },\n  dateTime: {\n    marginRight: 9,\n    width: 200,\n    textAlign: \"right\",\n    fontSize: 13\n  }\n});\n\n\nclass TaskItem extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      expanded: false,\n      notesValue: props.task.notes,\n      nameValue: props.task.name,\n      datePickerOpen: false,\n      dateValue: moment(props.task.due_date)\n    };\n\n    this.handleChange = this.handleChange.bind(this);\n    this.handleDateToggle = this.handleDateToggle.bind(this);\n    this.handleExpandClick = this.handleExpandClick.bind(this);\n    this.handleBlur = this.handleBlur.bind(this);\n    this.handleNotesUpdate = this.handleNotesUpdate.bind(this);\n    this.handleNameUpdate = this.handleNameUpdate.bind(this);\n    this.handleFavoriteClick = this.handleFavoriteClick.bind(this);\n    this.handleDateAccept = this.handleDateAccept.bind(this);\n\n  }\n\n  handleExpandClick() {\n    this.setState ({\n      expanded: !this.state.expanded\n    })\n  }\n\n  handleChange() {\n    //axios.put(url, map of request body)\n    axios.put(\"http://api.ambrosia.red/tasks/\" + this.props.task.id, {\n      completed: !this.props.task.completed //actual request body like {completed: true}\n    }).then(res => {\n      this.props.onUpdate(res.data); //res.data is \"task,\" a map\n    });\n  }\n\n  handleBlur(e) {\n    axios.put(\"http://api.ambrosia.red/tasks/\" + this.props.task.id, {\n      notes: this.state.notesValue, //get from reference called this.textInput\n      name: this.state.nameValue\n    }).then(res => {\n      this.props.onUpdate(res.data);\n    });\n  }\n\n  handleDateToggle(close) {\n    if (close) {\n      axios.put(\"http://api.ambrosia.red/tasks/\" + this.props.task.id, {\n        //2019-07-14 01:29:03\n        due_date: this.state.dateValue.format(\"YYYY-MM-DD\")\n      }).then(res => {\n        this.props.onUpdate(res.data);\n      })\n    }\n\n    this.setState({\n      datePickerOpen: !this.state.datePickerOpen,\n    });\n  }\n\n  handleDateAccept(date) {\n    this.setState({\n      dateValue: date\n    });\n  }\n\n  //e is the event, e.target is textfield \n  handleNotesUpdate(e) {\n    this.setState({\n      notesValue: e.target.value\n    });\n  }\n\n  handleNameUpdate(e) {\n    this.setState({\n      nameValue: e.target.value\n    });\n  }\n\n  handleFavoriteClick() {\n    axios.put(\"http://api.ambrosia.red/tasks/\" + this.props.task.id, {\n      starred: !this.props.task.starred \n    }).then(res => {\n      this.props.onUpdate(res.data); //res.data is \"task,\" a map\n    });\n\n  }\n\n  render() {\n    const { classes } = this.props;\n\n    let icon;\n\n    if (this.props.task.starred) {\n      icon = <FavoriteIcon />;\n    } else {\n      icon = <FavoriteBorderIcon />;\n    }\n\n    return (\n      \n      <Card className={classes.card}>\n        <CardContent className={classes.cardContent}>\n            <Checkbox className={classes.checkBox}\n                      checked={this.props.task.completed}\n                      onChange={this.handleChange} />\n            <TextField\n              fullWidth={true}\n              placeholder=\"New Task\"\n              className={classes.textField}\n              value={this.state.nameValue}\n              onChange={this.handleNameUpdate}\n              onBlur={this.handleBlur}\n              InputProps={{disableUnderline: true}}\n            />\n            <Typography className={classes.dateTime}>\n              {/* {moment(this.props.task.due_date).format('ddd MMMM Do')} */}\n              {moment(this.state.dateValue).fromNow()}\n            </Typography>\n        </CardContent>\n        <CardActions disableSpacing>\n        <IconButton onClick={this.handleFavoriteClick}>\n            {icon}\n          </IconButton>\n          <IconButton onClick={() => this.handleDateToggle(false)}>\n            <EventIcon />\n          </IconButton>\n          <MuiPickersUtilsProvider utils={MomentUtils}>\n            <DateTimePicker\n              variant=\"inline\"\n              value={this.state.dateValue}\n              InputProps={{disableUnderline: true, className: classes.dateTime}}\n              open={this.state.datePickerOpen}\n              onClose={() => this.handleDateToggle(true)}\n              onChange={this.handleDateAccept}\n            />\n          </MuiPickersUtilsProvider>\n          <IconButton\n            className={clsx(classes.expand, {\n              [classes.expandOpen]: this.state.expanded,\n              })}\n            onClick={this.handleExpandClick}\n            aria-expanded={this.state.expanded}\n            aria-label=\"Show more\"\n          >\n            <ExpandMoreIcon />\n          </IconButton>\n        </CardActions>\n        <Collapse in={this.state.expanded} timeout=\"auto\" unmountOnExit>\n          <CardContent className={classes.collapseContent}>\n            <TextField\n              autoFocus={true}\n              fullWidth={true}\n              placeholder=\"Notes\"\n              rows={2}\n              multiline={true}\n              className={classes.textField}\n              margin=\"normal\"\n              value={this.state.notesValue}\n              onChange={this.handleNotesUpdate}\n              onBlur={this.handleBlur}\n              InputProps={{disableUnderline: true}}\n            />\n          </CardContent>\n        </Collapse>\n    </Card>\n    );\n  }\n}\n\nTaskItem.propTypes = {\n  classes: PropTypes.object.isRequired\n};\n\nexport default withStyles(useStyles)(TaskItem); ","import React, { Component } from 'react';\nimport { withStyles } from '@material-ui/core/styles';\nimport axios from \"axios\";\nimport TaskItem from \"./TaskItem.js\";\nimport AddIcon from '@material-ui/icons/Add';\nimport Fab from '@material-ui/core/Fab';\nimport Drawer from '@material-ui/core/Drawer';\nimport List from '@material-ui/core/List';\nimport Divider from '@material-ui/core/Divider';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport InboxIcon from '@material-ui/icons/MoveToInbox';\nimport MailIcon from '@material-ui/icons/Mail';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport IconButton from '@material-ui/core/IconButton';\nimport Typography from '@material-ui/core/Typography';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport ChevronLeftIcon from '@material-ui/icons/ChevronLeft';\nimport FavoriteIcon from '@material-ui/icons/Favorite';\n\n\n\nconst drawerWidth = 240;\n\nconst useStyles = theme => ({\n  root: {\n    display: 'flex',\n    paddingTop: 40\n  },\n  fab: {\n    right: 20,\n    bottom: 20,\n    position: 'fixed',\n    //when the position is fixed, then you can use right (20px from the right of the screen) and bottom \n  },\n  appBar: {\n    transition: theme.transitions.create(['margin', 'width'], {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.leavingScreen,\n    }),\n  },\n  appBarShift: {\n    width: `calc(100% - ${drawerWidth}px)`,\n    marginLeft: drawerWidth,\n    transition: theme.transitions.create(['margin', 'width'], {\n      easing: theme.transitions.easing.easeOut,\n      duration: theme.transitions.duration.enteringScreen,\n    }),\n  },\n  menuButton: {\n    marginRight: theme.spacing(2),\n  },\n  hide: {\n    display: 'none',\n  },\n  drawer: {\n    width: drawerWidth,\n    flexShrink: 0,\n  },\n  drawerPaper: {\n    width: drawerWidth,\n  },\n  drawerHeader: {\n    display: 'flex',\n    alignItems: 'center',\n    padding: '0 8px',\n    ...theme.mixins.toolbar,\n    justifyContent: 'flex-end',\n  },\n  content: {\n    flexGrow: 1,\n    padding: theme.spacing(3),\n    transition: theme.transitions.create('margin', {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.leavingScreen,\n    }),\n    marginLeft: -drawerWidth,\n    width: \"auto\"\n  },\n  contentShift: {\n    transition: theme.transitions.create('margin', {\n      easing: theme.transitions.easing.easeOut,\n      duration: theme.transitions.duration.enteringScreen,\n    }),\n    marginLeft: 0,\n  },\n});\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      tasks: [],\n      drawerOpen: false\n    };\n\n    axios.get(\"http://api.ambrosia.red/tasks\").then(res => {\n      this.setState({\n        tasks: res.data\n      });\n    });\n\n    this.handleUpdate = this.handleUpdate.bind(this);\n    this.handleAddTask = this.handleAddTask.bind(this);\n    this.toggleDrawer = this.toggleDrawer.bind(this);\n  }\n\n  //function that handles the update given a task passed in \n  //task is a map \n  handleUpdate(task) {\n    let updatedTasks = this.state.tasks;\n\n    for (var i = 0; i < updatedTasks.length; i++) {\n      if (updatedTasks[i].id === task.id) { //res.data = task = the entire task \n        updatedTasks[i] = task;\n        break;\n      }\n    }\n\n    this.setState({\n      tasks: updatedTasks //tasks is now the new list of updated tasks \n    });\n  }\n\n  handleAddTask() {\n    axios.post(\"http://api.ambrosia.red/tasks\", {\n      due_date: \"2019-07-14 01:29:03\"\n    }).then(res => {\n      let updatedTasks = this.state.tasks;\n      updatedTasks.push(res.data);\n\n      this.setState({\n        tasks: updatedTasks\n      });\n    })\n  }\n\n  toggleDrawer(isOpen) {\n    this.setState({\n      drawerOpen: isOpen\n    });\n  }\n\n\n\n  render() {\n    let taskElements = [];\n\n    for (var i = 0; i < this.state.tasks.length; i++) {\n      taskElements.push(\n        <TaskItem\n          key={this.state.tasks[i].id}\n          task={this.state.tasks[i]} //retrieves entire task with id, name, due_date, starred, notes\n          onUpdate={this.handleUpdate} />\n      );\n    }\n\n    const { classes } = this.props;\n\n    //render the list called taskElements\n    return (\n      <div className={classes.root}>\n        <CssBaseline />\n        <AppBar\n          position=\"fixed\"\n          className={classes.appBar + \" \" + (this.state.drawerOpen ? classes.appBarShift : \"\")}\n        >\n          <Toolbar>\n            <IconButton\n              color=\"inherit\"\n              aria-label=\"open drawer\"\n              onClick={() => this.toggleDrawer(true)}\n              edge=\"start\"\n              className={classes.menuButton + \" \" + (this.state.drawerOpen ? classes.hide : \"\")}\n            >\n              <MenuIcon />\n            </IconButton>\n            <Typography variant=\"h6\" noWrap>\n              Ambrosia\n            </Typography>\n          </Toolbar>\n        </AppBar>\n        <Drawer\n          className={classes.drawer}\n          open={this.state.drawerOpen}\n          variant=\"persistent\"\n          anchor=\"left\"\n          onClose={() => this.toggleDrawer(false)}\n          onOpen={() => this.toggleDrawer(true)}\n          classes={{\n            paper: classes.drawerPaper\n          }}\n        >\n          <div className={classes.drawerHeader}>\n            <IconButton onClick={() => this.toggleDrawer(false)}>\n              <ChevronLeftIcon />\n            </IconButton>\n          </div>\n          <Divider />\n          <List>\n            {['Inbox', 'Today', 'Upcoming', 'Trash'].map((text, index) => (\n              <ListItem button key={text}>\n                <ListItemIcon>{index % 2 === 0 ? <InboxIcon /> : <FavoriteIcon />}</ListItemIcon>\n                <ListItemText primary={text} />\n              </ListItem>\n            ))}\n          </List>\n          {/* <Divider />\n          <List>\n            {['All mail', 'Trash', 'Spam'].map((text, index) => (\n              <ListItem button key={text}>\n                <ListItemIcon>{index % 2 === 0 ? <InboxIcon /> : <MailIcon />}</ListItemIcon>\n                <ListItemText primary={text} />\n              </ListItem>\n            ))}\n          </List> */}\n        </Drawer>\n        <Fab \n            color=\"primary\" \n            aria-label=\"add\" \n            className={classes.fab}\n            onClick={this.handleAddTask}\n            >\n          <AddIcon />\n        </Fab>\n        <div \n          className={classes.content + \" \" + (this.state.drawerOpen ? classes.contentShift : \"\")}\n        >\n          {taskElements}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default withStyles(useStyles)(App); \n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}