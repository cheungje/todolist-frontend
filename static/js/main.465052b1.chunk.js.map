{"version":3,"sources":["TaskItem.js","App.js","serviceWorker.js","index.js"],"names":["TaskItem","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","expanded","notesValue","task","notes","nameValue","name","datePickerOpen","dateValue","moment","due_date","handleChange","bind","assertThisInitialized","handleDateToggle","handleExpandClick","handleBlur","handleNotesUpdate","handleNameUpdate","handleFavoriteClick","handleDateAccept","handleDeleteTask","setState","_this2","axios","put","id","completed","then","res","onUpdate","data","_this3","trashed","_this4","close","_this5","format","date","e","target","value","_this6","starred","icon","_this7","classes","react_default","a","createElement","Favorite_default","FavoriteBorder_default","Card","className","card","CardContent","cardContent","Checkbox","checkBox","checked","onChange","TextField","fullWidth","placeholder","textField","onBlur","InputProps","disableUnderline","Typography","dateTime","fromNow","CardActions","disableSpacing","IconButton","onClick","Event_default","material_ui_pickers_esm","utils","MomentUtils","variant","open","onClose","deleteIcon","DeleteOutline_default","clsx","expand","defineProperty","expandOpen","aria-expanded","aria-label","ExpandMore_default","Collapse","in","timeout","unmountOnExit","collapseContent","autoFocus","rows","multiline","margin","Component","withStyles","theme","maxWidth","borderRadius","display","alignItems","justifyContent","fontFamily","paddingBottom","taskName","fontSize","transform","transition","transitions","create","duration","shortest","paddingTop","marginRight","width","textAlign","marginLeft","App","tasks","drawerOpen","anchorEl","selectedIndex","dateFilter","undefined","get","handleUpdate","handleAddTask","toggleDrawer","handleClose","handleMenu","handleUpdatedDrawerItem","updatedTasks","i","length","drawerItem","newState","year","month","diff","post","push","isOpen","event","currentTarget","index","taskElements","src_TaskItem","key","CssBaseline","AppBar","position","appBar","appBarShift","Toolbar","color","edge","menuButton","hide","Menu_default","title","noWrap","Add_default","Menu_Menu","anchorOrigin","vertical","horizontal","keepMounted","transformOrigin","List","ListItem","menu","button","selected","handleListItemClick","ListItemIcon","InsertDriveFile_default","ListItemText","primary","secondary","FolderSpecial_default","Drawer","drawer","anchor","paper","drawerPaper","drawerHeader","ChevronLeft_default","Divider","Inbox_default","Schedule_default","DateRange_default","Done_default","Fab","fab","content","contentShift","right","bottom","easing","sharp","leavingScreen","concat","easeOut","enteringScreen","spacing","flexShrink","objectSpread","padding","mixins","toolbar","flexGrow","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.465052b1.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport Card from '@material-ui/core/Card';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport Typography from '@material-ui/core/Typography';\nimport axios from 'axios';\nimport clsx from 'clsx';\nimport Collapse from '@material-ui/core/Collapse';\nimport IconButton from '@material-ui/core/IconButton';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport TextField from '@material-ui/core/TextField';\nimport EventIcon from '@material-ui/icons/Event';\nimport FavoriteIcon from '@material-ui/icons/Favorite';\nimport FavoriteBorderIcon from '@material-ui/icons/FavoriteBorder';\nimport { DateTimePicker, MuiPickersUtilsProvider } from \"@material-ui/pickers\";\nimport MomentUtils from '@date-io/moment';\nimport moment from 'moment';\nimport DeleteOutline from '@material-ui/icons/DeleteOutline';\n\n\nconst useStyles = theme => ({\n  card: {\n    maxWidth: 580,\n    margin: \"24px auto\",\n    borderRadius: 3\n  },\n  cardContent: {  \n      display: \"flex\",\n      alignItems: \"center\",\n      justifyContent: \"flex-start\",\n      fontFamily: \"Helvetica Neue, sans-serif\",\n      paddingBottom: 0\n  },\n  taskName : {\n    fontSize: 15\n  },\n  expand: {\n    transform: 'rotate(0)', //rotate 0 deg \n    transition: theme.transitions.create('transform', {\n      duration: theme.transitions.duration.shortest\n    })\n  },\n  expandOpen: {\n    transform: 'rotate(180deg)'\n  },\n  collapseContent: {\n    paddingTop: 0\n  },\n  dateTime: {\n    marginRight: 9,\n    width: 200,\n    textAlign: \"right\",\n    fontSize: 13\n  },\n  deleteIcon: {\n    marginLeft: \"auto\"\n  }\n});\n\n\nclass TaskItem extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      expanded: false,\n      notesValue: props.task.notes,\n      nameValue: props.task.name,\n      datePickerOpen: false,\n      dateValue: moment(props.task.due_date)\n    };\n\n    this.handleChange = this.handleChange.bind(this);\n    this.handleDateToggle = this.handleDateToggle.bind(this);\n    this.handleExpandClick = this.handleExpandClick.bind(this);\n    this.handleBlur = this.handleBlur.bind(this);\n    this.handleNotesUpdate = this.handleNotesUpdate.bind(this);\n    this.handleNameUpdate = this.handleNameUpdate.bind(this);\n    this.handleFavoriteClick = this.handleFavoriteClick.bind(this);\n    this.handleDateAccept = this.handleDateAccept.bind(this);\n    this.handleDeleteTask = this.handleDeleteTask.bind(this);\n\n  }\n\n  handleExpandClick() {\n    this.setState ({\n      expanded: !this.state.expanded\n    })\n  }\n\n  //put updates \n  handleChange() {\n    //axios.put(url, map of request body)\n    axios.put(\"http://localhost:18080/tasks/\" + this.props.task.id, {\n      completed: !this.props.task.completed //actual request body like {completed: true}\n    }).then(res => {\n      this.props.onUpdate(res.data); //res.data is \"task,\" a map\n    });\n  }\n\n  //want to update the tasks to set trashed=true\n  handleDeleteTask() {\n    axios.put(\"http://localhost:18080/tasks/\" + this.props.task.id, {\n      trashed: true\n    }).then(res => {\n      this.props.onUpdate(res.data);\n    });\n  }\n\n  handleBlur() {\n    axios.put(\"http://localhost:18080/tasks/\" + this.props.task.id, {\n      notes: this.state.notesValue, //get from reference called this.textInput\n      name: this.state.nameValue\n    }).then(res => {\n      this.props.onUpdate(res.data);\n    });\n  }\n\n  handleDateToggle(close) {\n    if (close) {\n      axios.put(\"http://localhost:18080/tasks/\" + this.props.task.id, {\n        //2019-07-14 01:29:03\n        due_date: this.state.dateValue.format(\"YYYY-MM-DD\")\n      }).then(res => {\n        this.props.onUpdate(res.data);\n      })\n    }\n\n    this.setState({\n      datePickerOpen: !this.state.datePickerOpen,\n    });\n  }\n\n\n\n\n  handleDateAccept(date) {\n    this.setState({\n      dateValue: date\n    });\n  }\n\n  //e is the event, e.target is textfield \n  handleNotesUpdate(e) {\n    this.setState({\n      notesValue: e.target.value\n    });\n  }\n\n  handleNameUpdate(e) {\n    this.setState({\n      nameValue: e.target.value\n    });\n  }\n\n  handleFavoriteClick() {\n    axios.put(\"http://localhost:18080/tasks/\" + this.props.task.id, {\n      starred: !this.props.task.starred \n    }).then(res => {\n      this.props.onUpdate(res.data); //res.data is \"task,\" a map\n    });\n\n  }\n\n  render() {\n    const { classes } = this.props;\n\n    let icon;\n\n    if (this.props.task.starred) {\n      icon = <FavoriteIcon />;\n    } else {\n      icon = <FavoriteBorderIcon />;\n    }\n\n    return (\n      \n      <Card className={classes.card}>\n        <CardContent \n          className={classes.cardContent}\n        >\n            <Checkbox className={classes.checkBox}\n                      checked={this.props.task.completed}\n                      onChange={this.handleChange} \n            />\n            <TextField\n              fullWidth={true}\n              placeholder=\"New Task\"\n              className={classes.textField}\n              value={this.state.nameValue}\n              onChange={this.handleNameUpdate}\n              onBlur={this.handleBlur}\n              InputProps={{disableUnderline: true}}\n            />\n            <Typography className={classes.dateTime}>\n              {/* {moment(this.props.task.due_date).format('ddd MMMM Do')} */}\n              {moment(this.state.dateValue).fromNow()}\n            </Typography>\n        </CardContent>\n        <CardActions disableSpacing>\n        <IconButton onClick={this.handleFavoriteClick}>\n            {icon}\n          </IconButton>\n          <IconButton onClick={() => this.handleDateToggle(false)}>\n            <EventIcon />\n          </IconButton>\n          <MuiPickersUtilsProvider utils={MomentUtils}>\n            <DateTimePicker\n              variant=\"inline\"\n              value={this.state.dateValue}\n              InputProps={{disableUnderline: true, className: classes.dateTime}}\n              open={this.state.datePickerOpen}\n              onClose={() => this.handleDateToggle(true)}\n              onChange={this.handleDateAccept}\n            />\n          </MuiPickersUtilsProvider>\n          <IconButton\n            className={classes.deleteIcon}\n            onClick={this.handleDeleteTask}\n            >\n              <DeleteOutline />\n          </IconButton>\n          <IconButton\n            className={clsx(classes.expand, {\n              [classes.expandOpen]: this.state.expanded,\n              })}\n            onClick={this.handleExpandClick}\n            aria-expanded={this.state.expanded}\n            aria-label=\"Show more\"\n          >\n            <ExpandMoreIcon />\n          </IconButton>\n        </CardActions>\n        <Collapse in={this.state.expanded} timeout=\"auto\" unmountOnExit>\n          <CardContent className={classes.collapseContent}>\n            <TextField\n              autoFocus={true}\n              fullWidth={true}\n              placeholder=\"Notes\"\n              rows={2}\n              multiline={true}\n              className={classes.textField}\n              margin=\"normal\"\n              value={this.state.notesValue}\n              onChange={this.handleNotesUpdate}\n              onBlur={this.handleBlur}\n              InputProps={{disableUnderline: true}}\n            />\n          </CardContent>\n        </Collapse>\n    </Card>\n    );\n  }\n}\n\nTaskItem.propTypes = {\n  classes: PropTypes.object.isRequired\n};\n\nexport default withStyles(useStyles)(TaskItem); ","import React, { Component } from 'react';\nimport { withStyles } from '@material-ui/core/styles';\nimport axios from \"axios\";\nimport TaskItem from \"./TaskItem.js\";\nimport AddIcon from '@material-ui/icons/Add';\nimport Fab from '@material-ui/core/Fab';\nimport Drawer from '@material-ui/core/Drawer';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport Divider from '@material-ui/core/Divider';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport InboxIcon from '@material-ui/icons/Inbox';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport IconButton from '@material-ui/core/IconButton';\nimport Typography from '@material-ui/core/Typography';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport ChevronLeftIcon from '@material-ui/icons/ChevronLeft';\nimport DateRange from '@material-ui/icons/DateRange';\nimport DeleteOutline from '@material-ui/icons/DeleteOutline';\nimport Schedule from '@material-ui/icons/Schedule';\nimport Done from '@material-ui/icons/Done';\nimport Menu from '@material-ui/core/Menu';\nimport InsertDriveFile from '@material-ui/icons/InsertDriveFile';\nimport FolderSpecial from '@material-ui/icons/FolderSpecial';\nimport moment from 'moment';\n\n\n\nconst drawerWidth = 240;\n\nconst useStyles = theme => ({\n  fab: {\n    right: 20,\n    bottom: 20,\n    position: 'fixed',\n    //when the position is fixed, then you can use right (20px from the right of the screen) and bottom \n  },\n  appBar: {\n    transition: theme.transitions.create(['margin', 'width'], {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.leavingScreen,\n    }),\n  },\n  appBarShift: {\n    width: `calc(100% - ${drawerWidth}px)`,\n    marginLeft: drawerWidth,\n    transition: theme.transitions.create(['margin', 'width'], {\n      easing: theme.transitions.easing.easeOut,\n      duration: theme.transitions.duration.enteringScreen,\n    }),\n  },\n  menuButton: {\n    marginRight: theme.spacing(2),\n  },\n  hide: {\n    display: 'none',\n  },\n  drawer: {\n    width: drawerWidth,\n    flexShrink: 0,\n  },\n  drawerPaper: {\n    width: drawerWidth,\n  },\n  drawerHeader: {\n    display: 'flex',\n    alignItems: 'center',\n    padding: '0 8px',\n    ...theme.mixins.toolbar,\n    justifyContent: 'flex-end',\n  },\n  content: {\n    flexGrow: 1,\n    padding: 75,\n    transition: theme.transitions.create('margin', {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.leavingScreen,\n    }),\n    width: \"auto\"\n  },\n  contentShift: {\n    transition: theme.transitions.create('margin', {\n      easing: theme.transitions.easing.easeOut,\n      duration: theme.transitions.duration.enteringScreen,\n    }),\n    marginLeft: drawerWidth,\n  },\n  title: {\n    flexGrow: 1,\n  },\n  menu: {\n    width: 350\n  }\n});\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      tasks: [],\n      drawerOpen: true,\n      anchorEl: null,\n      selectedIndex: true,\n      trashed: false,\n      completed: false,\n      dateFilter: undefined\n    };\n\n    //http://api.ambrosia.red/tasks\n    //http://api.ambrosia.red/tasks\n    axios.get(\"http://localhost:18080/tasks\").then(res => {\n      this.setState({\n        tasks: res.data\n      });\n    });\n\n    this.handleUpdate = this.handleUpdate.bind(this);\n    this.handleAddTask = this.handleAddTask.bind(this);\n    this.toggleDrawer = this.toggleDrawer.bind(this);\n    this.handleClose = this.handleClose.bind(this);\n    this.handleMenu = this.handleMenu.bind(this);\n    this.handleUpdatedDrawerItem = this.handleUpdatedDrawerItem.bind(this);\n  }\n\n  //function that handles the update given a task passed in \n  //task is a map \n  handleUpdate(task) {\n    let updatedTasks = this.state.tasks;\n\n    for (var i = 0; i < updatedTasks.length; i++) {\n      if (updatedTasks[i].id === task.id) { //res.data = task = the entire task \n        updatedTasks[i] = task;\n        break;\n      }\n    }\n\n    this.setState({\n      tasks: updatedTasks //tasks is now the new list of updated tasks \n    });\n  }\n\n\n  handleUpdatedDrawerItem(drawerItem) {\n    let newState = {\n      completed: undefined,\n      trashed: undefined,\n      dateFilter: undefined\n    };\n\n    if (drawerItem === \"inbox\") {\n      newState.completed = false;\n      newState.trashed = false;\n    } else if (drawerItem === \"waste\") {\n      newState.trashed = true;\n    } else if (drawerItem === \"logbook\") {\n      newState.completed = true;\n    } else if (drawerItem === \"today\") {\n      newState.dateFilter = (due_date) => {\n        return moment(due_date).year() === moment().year()\n          && moment(due_date).month() === moment().month()\n          && moment(due_date).date() === moment().date();\n      }\n    } else if (drawerItem === \"upcoming\") {\n      newState.dateFilter = (due_date) => {\n        let diff = moment(due_date).diff(moment(), 'days');\n        return diff >= 0 && diff <= 7; //moment() is current date \n      };\n    }\n\n    this.setState(newState);\n  }\n\n  //post creates \n  //http://api.ambrosia.red/tasks\n  //http://localhost:18080/tasks\n  handleAddTask() {\n    axios.post(\"http://localhost:18080/tasks\", {\n      due_date: moment().format('YYYY-MM-DD HH:mm:ss') //second parameter is request body\n    }).then(res => {\n      let updatedTasks = this.state.tasks;\n      updatedTasks.push(res.data);\n\n      this.setState({\n        tasks: updatedTasks\n      });\n    })\n  }\n\n\n  toggleDrawer(isOpen) {\n    this.setState({\n      drawerOpen: isOpen\n    });\n  }\n\n  handleClose() {\n    this.setState({\n      anchorEl: null //menu is not anchored to anything \n    });\n  }\n\n  handleMenu(event) {\n    // console.log(event);\n    // console.log(event.currentTarget);\n    this.setState ({\n      anchorEl: event.currentTarget //event.currentTarget is the menu \n    });\n  }\n\n  handleListItemClick(event, index) {\n    this.setState({\n      selectedIndex: index\n    });\n  }\n\n\n  render() {\n    let taskElements = [];\n\n    for (var i = 0; i < this.state.tasks.length; i++) {\n      //either we don't care or it matches our filter \n      //has to match both trashed & completed filters \n      if ((this.state.trashed === undefined || this.state.tasks[i].trashed === this.state.trashed) \n        && (this.state.completed === undefined || this.state.tasks[i].completed === this.state.completed)\n        && (this.state.dateFilter === undefined || this.state.dateFilter(this.state.tasks[i].due_date))) {\n        taskElements.push(\n          <TaskItem\n            key={this.state.tasks[i].id}\n            task={this.state.tasks[i]} //retrieves entire task with id, name, due_date, starred, notes\n            onUpdate={this.handleUpdate} \n            />\n        );\n      }\n    }\n\n    const { classes } = this.props;\n\n    //render the list called taskElements\n    return (\n      <div>\n        <CssBaseline />\n        <AppBar\n          position=\"fixed\"\n          className={classes.appBar + \" \" + (this.state.drawerOpen ? classes.appBarShift : \"\")}\n        >\n          <Toolbar>\n            <IconButton\n              color=\"inherit\"\n              aria-label=\"open drawer\"\n              onClick={() => this.toggleDrawer(true)}\n              edge=\"start\"\n              className={classes.menuButton + \" \" + (this.state.drawerOpen ? classes.hide : \"\")}\n            >\n              <MenuIcon />\n            </IconButton>\n            <Typography variant=\"h6\" className={classes.title} noWrap >\n              Ambrosia\n            </Typography>\n\n            <div >\n              <IconButton\n                color=\"inherit\"\n                onClick={this.handleMenu}\n              >\n                <AddIcon />\n              </IconButton>\n              <Menu                \n                id=\"menu-appbar\"\n                anchorEl={this.state.anchorEl}\n                anchorOrigin={{\n                  vertical: 'top',\n                  horizontal: 'right',\n                }}\n                keepMounted\n                transformOrigin={{\n                  vertical: 'top',\n                  horizontal: 'right',\n                }}\n                open={this.state.anchorEl !== null} //if the anchorEl is not null then the menu should be opened \n                onClose={this.handleClose}\n              >\n              <List>\n                <ListItem \n                  className={classes.menu}\n                  button\n                  selected={this.state.selectedIndex === 0}\n                  onClick={(event) => this.handleListItemClick(event, 0)}\n                  >\n                  <ListItemIcon><InsertDriveFile /></ListItemIcon>\n                    <ListItemText \n                    primary=\"New Project\" secondary=\"Create a project and work towards completion one to-do at a time.\" />\n                </ListItem>\n                <ListItem\n                  className={classes.menu}\n                  button\n                  selected={this.state.selectedIndex === 1}\n                  onClick={(event) => this.handleListItemClick(event, 1)}\n                  >\n                  <ListItemIcon><FolderSpecial /></ListItemIcon>\n                    <ListItemText primary=\"New Area\" secondary=\"Group your projects based on your committments, such as Classes or Family.\" />\n                </ListItem>\n              </List>\n              </Menu>\n            </div>\n\n          </Toolbar>\n        </AppBar>\n\n        <Drawer\n          className={classes.drawer}\n          open={this.state.drawerOpen}\n          variant=\"persistent\"\n          anchor=\"left\"\n          onClose={() => this.toggleDrawer(false)}\n          classes={{\n            paper: classes.drawerPaper\n          }}\n        >\n          <div className={classes.drawerHeader}>\n            <IconButton onClick={() => this.toggleDrawer(false)}>\n              <ChevronLeftIcon />\n            </IconButton>\n          </div>\n          <Divider />\n          <List>\n            <ListItem \n              button={true}\n              key=\"Inbox\"\n              onClick={() => this.handleUpdatedDrawerItem(\"inbox\")}\n            >\n              <ListItemIcon><InboxIcon /></ListItemIcon>\n              <ListItemText primary=\"Inbox\" />\n            </ListItem>\n            <ListItem \n              button={true}\n              key=\"Today\"\n              onClick={() => this.handleUpdatedDrawerItem(\"today\")}\n              >\n              <ListItemIcon><Schedule /></ListItemIcon>\n              <ListItemText primary=\"Today\" />\n            </ListItem>\n            <ListItem \n              button={true}\n              key=\"Upcoming\"\n              onClick={() => this.handleUpdatedDrawerItem(\"upcoming\")}\n              >\n              <ListItemIcon><DateRange /></ListItemIcon>\n              <ListItemText primary=\"Upcoming\" />\n            </ListItem>\n            <ListItem \n              button={true}\n              key=\"Logbook\"\n              onClick={() => this.handleUpdatedDrawerItem(\"logbook\")}\n              >\n              <ListItemIcon><Done /></ListItemIcon>\n              <ListItemText primary=\"Logbook\" />\n            </ListItem> \n            <ListItem \n              button={true}\n              key=\"Waste\"\n              onClick={() => this.handleUpdatedDrawerItem(\"waste\")}\n              >\n              <ListItemIcon><DeleteOutline /></ListItemIcon>\n              <ListItemText primary=\"Waste\" />\n            </ListItem>\n          </List>\n          <Divider />\n        </Drawer>\n        <Fab \n            color=\"primary\" \n            aria-label=\"add\" \n            className={classes.fab}\n            onClick={this.handleAddTask}\n            >\n          <AddIcon />\n        </Fab>\n        <div \n          className={classes.content + \" \" + (this.state.drawerOpen ? classes.contentShift : \"\")}\n        >\n          {taskElements}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default withStyles(useStyles)(App); \n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}